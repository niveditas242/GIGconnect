// src/components/PortfolioBuilder/PortfolioBuilder.tsx
import React, { useState } from "react";
import "./PortfolioBuilder.css";

interface Project {
  id: string;
  title: string;
  description: string;
  image: string;
  technologies: string[];
  category: string;
  liveUrl?: string;
  githubUrl?: string;
}

interface PortfolioData {
  name: string;
  title: string;
  bio: string;
  email: string;
  phone: string;
  location: string;
  experience: string;
  education: string;
  skills: string[];
  projects: Project[];
  socialLinks: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    website?: string;
  };
}

const PortfolioBuilder: React.FC = () => {
  const [portfolio, setPortfolio] = useState<PortfolioData>({
    name: "",
    title: "",
    bio: "",
    email: "",
    phone: "",
    location: "",
    experience: "",
    education: "",
    skills: [],
    projects: [],
    socialLinks: {},
  });

  const [currentSkill, setCurrentSkill] = useState("");
  const [currentProject, setCurrentProject] = useState<Partial<Project>>({
    title: "",
    description: "",
    image: "",
    technologies: [],
    category: "web-development",
  });

  // Check if portfolio has content
  const hasContent = () => {
    return (
      portfolio.name.trim() !== "" ||
      portfolio.title.trim() !== "" ||
      portfolio.bio.trim() !== "" ||
      portfolio.skills.length > 0 ||
      portfolio.projects.length > 0
    );
  };

  // Download portfolio as PDF/Text
  const downloadPortfolio = () => {
    if (!hasContent()) {
      alert("Please add some content to your portfolio before downloading.");
      return;
    }

    // Create portfolio content
    const portfolioContent = `
GIGconnect Portfolio

PERSONAL INFORMATION
-------------------
Name: ${portfolio.name || "Not provided"}
Title: ${portfolio.title || "Not provided"}
Email: ${portfolio.email || "Not provided"}
Phone: ${portfolio.phone || "Not provided"}
Location: ${portfolio.location || "Not provided"}
Experience: ${portfolio.experience || "Not provided"}
Education: ${portfolio.education || "Not provided"}

BIO
---
${portfolio.bio || "No bio provided"}

SKILLS & TECHNOLOGIES
---------------------
${portfolio.skills.length > 0 ? portfolio.skills.join(", ") : "No skills added"}

PROJECTS (${portfolio.projects.length})
--------
${portfolio.projects
  .map(
    (project) => `
${project.title}
Category: ${project.category}
Description: ${project.description}
${project.liveUrl ? `Live Demo: ${project.liveUrl}` : ""}
${project.githubUrl ? `GitHub: ${project.githubUrl}` : ""}
`
  )
  .join("\n")}

Generated by GIGconnect - ${new Date().toLocaleDateString()}
    `.trim();

    // Create and download file
    const blob = new Blob([portfolioContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `portfolio-${portfolio.name || "my"}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Add skill
  const addSkill = () => {
    if (
      currentSkill.trim() &&
      !portfolio.skills.includes(currentSkill.trim())
    ) {
      setPortfolio((prev) => ({
        ...prev,
        skills: [...prev.skills, currentSkill.trim()],
      }));
      setCurrentSkill("");
    }
  };

  // Remove skill
  const removeSkill = (skill: string) => {
    setPortfolio((prev) => ({
      ...prev,
      skills: prev.skills.filter((s) => s !== skill),
    }));
  };

  // Add project
  const addProject = () => {
    if (currentProject.title && currentProject.description) {
      const newProject: Project = {
        id: Date.now().toString(),
        title: currentProject.title || "",
        description: currentProject.description || "",
        image: currentProject.image || "",
        technologies: currentProject.technologies || [],
        category: currentProject.category || "web-development",
        liveUrl: currentProject.liveUrl,
        githubUrl: currentProject.githubUrl,
      };

      setPortfolio((prev) => ({
        ...prev,
        projects: [...prev.projects, newProject],
      }));

      setCurrentProject({
        title: "",
        description: "",
        image: "",
        technologies: [],
        category: "web-development",
      });
    }
  };

  // Remove project
  const removeProject = (id: string) => {
    setPortfolio((prev) => ({
      ...prev,
      projects: prev.projects.filter((project) => project.id !== id),
    }));
  };

  return (
    <div className="portfolio-builder">
      <div className="portfolio-hero-banner">
        <div className="hero-overlay">
          <div className="hero-content">
            <h1>Build Your Professional Portfolio</h1>
            <p>
              Showcase your skills and projects to attract clients worldwide
            </p>
          </div>
        </div>
      </div>

      <div className="portfolio-container">
        <div className="portfolio-content">
          <div className="portfolio-layout">
            {/* Form Section */}
            <div className="form-section">
              {/* Personal Information */}
              <section className="portfolio-form-section">
                <h2>Personal Information</h2>
                <div className="form-grid">
                  <div className="form-group">
                    <label>Full Name *</label>
                    <input
                      type="text"
                      value={portfolio.name}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          name: e.target.value,
                        }))
                      }
                      placeholder="Enter your full name"
                    />
                  </div>

                  <div className="form-group">
                    <label>Professional Title *</label>
                    <input
                      type="text"
                      value={portfolio.title}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          title: e.target.value,
                        }))
                      }
                      placeholder="e.g., Frontend Developer, UX Designer"
                    />
                  </div>

                  <div className="form-group">
                    <label>Location</label>
                    <input
                      type="text"
                      value={portfolio.location}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          location: e.target.value,
                        }))
                      }
                      placeholder="City, Country"
                    />
                  </div>

                  <div className="form-group">
                    <label>Email *</label>
                    <input
                      type="email"
                      value={portfolio.email}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          email: e.target.value,
                        }))
                      }
                      placeholder="your.email@example.com"
                    />
                  </div>

                  <div className="form-group">
                    <label>Phone</label>
                    <input
                      type="tel"
                      value={portfolio.phone}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          phone: e.target.value,
                        }))
                      }
                      placeholder="+1 (555) 000-0000"
                    />
                  </div>

                  <div className="form-group">
                    <label>Years of Experience</label>
                    <select
                      value={portfolio.experience}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          experience: e.target.value,
                        }))
                      }
                    >
                      <option value="">Select</option>
                      <option value="0-1">0-1 years</option>
                      <option value="1-3">1-3 years</option>
                      <option value="3-5">3-5 years</option>
                      <option value="5+">5+ years</option>
                    </select>
                  </div>

                  <div className="form-group">
                    <label>Education</label>
                    <input
                      type="text"
                      value={portfolio.education}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          education: e.target.value,
                        }))
                      }
                      placeholder="Degree or Certification"
                    />
                  </div>

                  <div className="form-group full-width">
                    <label>Professional Bio *</label>
                    <textarea
                      value={portfolio.bio}
                      onChange={(e) =>
                        setPortfolio((prev) => ({
                          ...prev,
                          bio: e.target.value,
                        }))
                      }
                      placeholder="Tell us about your experience, expertise, and what makes you unique..."
                      rows={4}
                    />
                  </div>
                </div>
              </section>

              {/* Skills Section */}
              <section className="portfolio-form-section">
                <h2>Skills & Technologies</h2>
                <div className="skills-input-group">
                  <input
                    type="text"
                    value={currentSkill}
                    onChange={(e) => setCurrentSkill(e.target.value)}
                    placeholder="Add a skill (e.g., React, Python, UI/UX Design)"
                    onKeyPress={(e) => e.key === "Enter" && addSkill()}
                    className="skill-input"
                  />
                  <button onClick={addSkill} className="skill-add-btn">
                    <span className="btn-icon">+</span>
                    Add Skill
                  </button>
                </div>

                <div className="skills-tags-container">
                  {portfolio.skills.map((skill, index) => (
                    <div key={index} className="skill-tag">
                      <span>{skill}</span>
                      <button
                        onClick={() => removeSkill(skill)}
                        className="skill-remove-btn"
                      >
                        ×
                      </button>
                    </div>
                  ))}
                  {portfolio.skills.length === 0 && (
                    <div className="no-skills-message">
                      No skills added yet. Add your first skill above!
                    </div>
                  )}
                </div>
              </section>

              {/* Projects Section */}
              <section className="portfolio-form-section">
                <h2>Add Projects</h2>

                <div className="project-input-form">
                  <div className="form-grid">
                    <div className="form-group full-width">
                      <label>Project Title *</label>
                      <input
                        type="text"
                        value={currentProject.title}
                        onChange={(e) =>
                          setCurrentProject((prev) => ({
                            ...prev,
                            title: e.target.value,
                          }))
                        }
                        placeholder="Enter project name"
                      />
                    </div>

                    <div className="form-group">
                      <label>Category</label>
                      <select
                        value={currentProject.category}
                        onChange={(e) =>
                          setCurrentProject((prev) => ({
                            ...prev,
                            category: e.target.value,
                          }))
                        }
                      >
                        <option value="web-development">Web Development</option>
                        <option value="mobile-app">Mobile App</option>
                        <option value="ui-ux">UI/UX Design</option>
                        <option value="graphic-design">Graphic Design</option>
                        <option value="other">Other</option>
                      </select>
                    </div>

                    <div className="form-group full-width">
                      <label>Project Description *</label>
                      <textarea
                        value={currentProject.description}
                        onChange={(e) =>
                          setCurrentProject((prev) => ({
                            ...prev,
                            description: e.target.value,
                          }))
                        }
                        placeholder="Describe your project, technologies used, challenges solved, and your role..."
                        rows={4}
                      />
                    </div>

                    <div className="form-group">
                      <label>Live Demo URL</label>
                      <input
                        type="url"
                        value={currentProject.liveUrl}
                        onChange={(e) =>
                          setCurrentProject((prev) => ({
                            ...prev,
                            liveUrl: e.target.value,
                          }))
                        }
                        placeholder="https://your-project.com"
                      />
                    </div>

                    <div className="form-group">
                      <label>GitHub URL</label>
                      <input
                        type="url"
                        value={currentProject.githubUrl}
                        onChange={(e) =>
                          setCurrentProject((prev) => ({
                            ...prev,
                            githubUrl: e.target.value,
                          }))
                        }
                        placeholder="https://github.com/your-repo"
                      />
                    </div>
                  </div>

                  <button onClick={addProject} className="project-add-btn">
                    <span className="btn-icon">+</span>
                    Add Project to Portfolio
                  </button>
                </div>

                {/* Projects List */}
                <div className="projects-preview">
                  <h3>Your Projects ({portfolio.projects.length})</h3>
                  {portfolio.projects.map((project) => (
                    <div key={project.id} className="project-preview-card">
                      <div className="project-preview-header">
                        <h4>{project.title}</h4>
                        <button
                          onClick={() => removeProject(project.id)}
                          className="project-remove-btn"
                        >
                          ×
                        </button>
                      </div>
                      <span className="project-category-badge">
                        {project.category}
                      </span>
                      <p className="project-preview-description">
                        {project.description}
                      </p>
                      <div className="project-links">
                        {project.liveUrl && (
                          <a
                            href={project.liveUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="project-link"
                          >
                            Live Demo
                          </a>
                        )}
                        {project.githubUrl && (
                          <a
                            href={project.githubUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="project-link"
                          >
                            GitHub
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                  {portfolio.projects.length === 0 && (
                    <div className="no-projects-message">
                      No projects added yet. Add your first project above!
                    </div>
                  )}
                </div>
              </section>

              {/* Action Buttons */}
              <div className="portfolio-actions">
                <button
                  onClick={downloadPortfolio}
                  className="download-portfolio-btn"
                  disabled={!hasContent()}
                >
                  <span className="btn-icon">📥</span>
                  Download Portfolio
                </button>
                <button className="preview-portfolio-btn">
                  <span className="btn-icon">👁️</span>
                  Preview Portfolio
                </button>
                <button className="publish-portfolio-btn">
                  <span className="btn-icon">🚀</span>
                  Publish Portfolio
                </button>
              </div>
            </div>

            {/* Preview Section */}
            <div className="preview-section">
              <div className="preview-container">
                <h2>Portfolio Preview</h2>
                <div className="portfolio-preview">
                  <div className="preview-header">
                    <div className="preview-avatar">
                      {portfolio.name
                        ? portfolio.name.charAt(0).toUpperCase()
                        : "U"}
                    </div>
                    <div className="preview-personal-info">
                      <h3>{portfolio.name || "Your Name"}</h3>
                      <p className="preview-title">
                        {portfolio.title || "Your Professional Title"}
                      </p>
                      <p className="preview-location">
                        {portfolio.location || "Location"}
                      </p>
                    </div>
                  </div>

                  <div className="preview-bio">
                    <h4>About Me</h4>
                    <p>
                      {portfolio.bio ||
                        "Your professional bio will appear here..."}
                    </p>
                  </div>

                  {portfolio.experience && (
                    <div className="preview-experience">
                      <h4>Experience</h4>
                      <p>{portfolio.experience} years of experience</p>
                    </div>
                  )}

                  {portfolio.education && (
                    <div className="preview-education">
                      <h4>Education</h4>
                      <p>{portfolio.education}</p>
                    </div>
                  )}

                  {portfolio.skills.length > 0 && (
                    <div className="preview-skills">
                      <h4>Skills & Technologies</h4>
                      <div className="preview-skills-tags">
                        {portfolio.skills.map((skill, index) => (
                          <span key={index} className="preview-skill-tag">
                            {skill}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {portfolio.projects.length > 0 && (
                    <div className="preview-projects">
                      <h4>Projects ({portfolio.projects.length})</h4>
                      <div className="preview-projects-list">
                        {portfolio.projects.map((project) => (
                          <div
                            key={project.id}
                            className="preview-project-item"
                          >
                            <h5>{project.title}</h5>
                            <span className="preview-project-category">
                              {project.category}
                            </span>
                            <p>{project.description}</p>
                            <div className="preview-project-links">
                              {project.liveUrl && (
                                <span className="preview-link">Live Demo</span>
                              )}
                              {project.githubUrl && (
                                <span className="preview-link">GitHub</span>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {!hasContent() && (
                    <div className="preview-empty-state">
                      <p>
                        ✨ Start building your portfolio by filling out the
                        form!
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PortfolioBuilder;
